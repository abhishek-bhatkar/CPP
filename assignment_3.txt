/*
1) class Number
   {
       int num;
   }
In the main function,
Number n1(8),n2(4),n3(20),n4(6),n5;
n5=n1-n2*n3/n4;
*/
#include<iostream>
using namespace std;
class number
{
private: 
	int num;
public:
	number()
	{

	}
	number(int num)
	{
		this->num=num;
	}
	number operator * (number &ref)
	{
		return number(num*ref.num);
	}
	number operator /(number &ref)
	{
		return number(num/ref.num);
	}
	number operator -(number &ref)
	{
		return number(num-ref.num);
	}
	void disp()
	{
		cout<<num<<endl;

	}
};
void main()
{
	
	number n1(8),n2(4),n3(20),n4(6),n5;
	n5=n1-n2*n3/n4;
	n5.disp();
}

/*
2) class sample
   {
	private:
		char ch;
	public:
		sample(char ch)
		{
			this->ch=ch;
		}
  };

given above class.

write a global function "display" which will access "ch" directly and display it.
call this function from main function.
*/
#include<iostream>
using namespace std;
class sample
{
	private:
		char ch;
	public:
		sample(char ch)
		{
			this->ch=ch;
		}
		friend void display(sample &);
};
void display(sample &ref)
{
	cout<<ref.ch<<endl;

};
int main()
{
	sample s('R');
	display(s);


}


/*
3) Given

class Module1
{
	int duration;
	public:
		Module1(int k)
		{
			duration=k;
		}
};

class Module2
{
	int duration;
	public:
		Module2(int k)
		{
			duration=k;
		}
};		
	
write a global function "check" which will take 2 modules (i.e. Module1 and Module2 ) and check whether Modules are same or not.
call this "check" function from main function.	

*/
#include<iostream>
using namespace std;
class Module2;
class Module1
{
	int duration;
	public:
		Module1(int k)
		{
			duration=k;
		}
		friend void check(Module1 &,Module2 &);
};

class Module2
{
	int duration;
	public:
		Module2(int k)
		{
			duration=k;
		}
		friend void check(Module1 &,Module2 &);
};		
void check(Module1 &ref,Module2 &ref1)
{
	if(ref.duration==ref1.duration)
		cout<<"equal"<<endl;
	else
		cout<<"not equal"<<endl;
}
void  main()
{
	Module1 m1(12);
	Module2 m2(11);
	check(m1,m2);
	Module1 m3(11);
	Module2 m4(11);
	check(m3,m4);
	
}


/*
4) Define a class , write two member functions 
	void disp1(){ //some code }
	void disp2(){ // some code }

	Try to call disp1   from    disp2.

*/
#include<iostream>
using namespace std;
class demo
{
	int num;
public:
	demo(int num)
	{
		this->num=num;
	}
	void disp1()
	{
		cout<<"in disp1: "<<num<<endl;
	}
	void disp2()
	{
		disp1();
		cout<<"int disp2: "<<num<<endl;
	}
};
int main()
{
	demo d(20);
	d.disp2();

}




/*
5) Define a class with constructor and  member function

	create object, call member function
	now create a reference to that object, and using that reference try to call member function
*/
#include<iostream>
using namespace std;
class demo
{
private: 
	int num;
public:
	demo(int num)
	{
		this->num=num;
	}
	void disp()
	{
		cout<<"disp"<<num<<endl;
	}

};
int main()
{ 
	demo d(20);
	d.disp();
	demo &ref=d;
	ref.disp();

}